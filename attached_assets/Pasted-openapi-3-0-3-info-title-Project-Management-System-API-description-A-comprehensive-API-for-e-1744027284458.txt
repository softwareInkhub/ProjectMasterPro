openapi: 3.0.3
info:
  title: Project Management System API
  description: A comprehensive API for enterprise project management with hierarchical organization structure
  version: 1.0.0
  contact:
    name: API Support
    email: support@projectmanagement.com

servers:
  - url: http://localhost:8080/api/v1
    description: Development server
  - url: https://api.projectmanagement.com/v1
    description: Production server

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Company:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        website:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - name

    Department:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        parentDepartmentId:
          type: string
          format: uuid
        companyId:
          type: string
          format: uuid
        subDepartments:
          type: array
          items:
            $ref: '#/components/schemas/Department'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - name
        - companyId

    Group:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        companyId:
          type: string
          format: uuid
        members:
          type: array
          items:
            $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - name
        - companyId

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [ADMIN, MANAGER, TEAM_LEAD, DEVELOPER, VIEWER]
        departmentId:
          type: string
          format: uuid
        companyId:
          type: string
          format: uuid
        status:
          type: string
          enum: [ACTIVE, INACTIVE, PENDING]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - email
        - firstName
        - lastName
        - role
        - companyId

    Team:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        parentTeamId:
          type: string
          format: uuid
        companyId:
          type: string
          format: uuid
        members:
          type: array
          items:
            $ref: '#/components/schemas/User'
        subTeams:
          type: array
          items:
            $ref: '#/components/schemas/Team'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - name
        - companyId

    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        status:
          type: string
          enum: [PLANNING, IN_PROGRESS, ON_HOLD, COMPLETED, CANCELLED]
        priority:
          type: string
          enum: [LOW, MEDIUM, HIGH, CRITICAL]
        companyId:
          type: string
          format: uuid
        teamId:
          type: string
          format: uuid
        departmentId:
          type: string
          format: uuid
        projectManager:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - name
        - companyId
        - teamId

    Epic:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [BACKLOG, IN_PROGRESS, COMPLETED]
        priority:
          type: string
          enum: [LOW, MEDIUM, HIGH, CRITICAL]
        projectId:
          type: string
          format: uuid
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        progress:
          type: number
          format: float
          minimum: 0
          maximum: 100
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - name
        - projectId

    Story:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        epicId:
          type: string
          format: uuid
        status:
          type: string
          enum: [BACKLOG, READY, IN_PROGRESS, IN_REVIEW, DONE]
        priority:
          type: string
          enum: [LOW, MEDIUM, HIGH, CRITICAL]
        storyPoints:
          type: integer
        assignee:
          $ref: '#/components/schemas/User'
        reporter:
          $ref: '#/components/schemas/User'
        startDate:
          type: string
          format: date
        dueDate:
          type: string
          format: date
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - name
        - epicId

    Task:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        storyId:
          type: string
          format: uuid
        parentTaskId:
          type: string
          format: uuid
        status:
          type: string
          enum: [TODO, IN_PROGRESS, IN_REVIEW, DONE, BLOCKED]
        priority:
          type: string
          enum: [LOW, MEDIUM, HIGH, CRITICAL]
        assignee:
          $ref: '#/components/schemas/User'
        estimatedHours:
          type: number
          format: float
        actualHours:
          type: number
          format: float
        startDate:
          type: string
          format: date
        dueDate:
          type: string
          format: date
        dependencies:
          type: array
          items:
            type: string
            format: uuid
        subtasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - name
        - storyId

    Comment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        content:
          type: string
        userId:
          type: string
          format: uuid
        entityType:
          type: string
          enum: [EPIC, STORY, TASK]
        entityId:
          type: string
          format: uuid
        parentCommentId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - content
        - userId
        - entityType
        - entityId

    Attachment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        fileUrl:
          type: string
        fileType:
          type: string
        size:
          type: integer
        entityType:
          type: string
          enum: [EPIC, STORY, TASK]
        entityId:
          type: string
          format: uuid
        uploadedBy:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
      required:
        - name
        - fileUrl
        - entityType
        - entityId
        - uploadedBy

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'
        expiresIn:
          type: integer
          description: Token expiration time in seconds

    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        firstName:
          type: string
        lastName:
          type: string
        companyId:
          type: string
          format: uuid
      required:
        - email
        - password
        - firstName
        - lastName
        - companyId

    ChangePasswordRequest:
      type: object
      properties:
        currentPassword:
          type: string
          format: password
        newPassword:
          type: string
          format: password
      required:
        - currentPassword
        - newPassword

    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        type:
          type: string
          enum: [TASK_ASSIGNED, COMMENT_ADDED, MENTION, DUE_DATE, STATUS_CHANGE]
        message:
          type: string
        entityType:
          type: string
          enum: [PROJECT, EPIC, STORY, TASK, COMMENT]
        entityId:
          type: string
          format: uuid
        read:
          type: boolean
        createdAt:
          type: string
          format: date-time
      required:
        - userId
        - type
        - message

    ProjectStats:
      type: object
      properties:
        totalTasks:
          type: integer
        completedTasks:
          type: integer
        inProgressTasks:
          type: integer
        blockedTasks:
          type: integer
        averageCompletionTime:
          type: number
          format: float
        tasksByPriority:
          type: object
          additionalProperties:
            type: integer
        tasksByStatus:
          type: object
          additionalProperties:
            type: integer
        teamMembers:
          type: integer
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date

    UserStats:
      type: object
      properties:
        assignedTasks:
          type: integer
        completedTasks:
          type: integer
        inProgressTasks:
          type: integer
        averageCompletionTime:
          type: number
          format: float
        tasksByPriority:
          type: object
          additionalProperties:
            type: integer
        tasksByProject:
          type: object
          additionalProperties:
            type: integer

    TimeEntry:
      type: object
      properties:
        id:
          type: string
          format: uuid
        taskId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        description:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        duration:
          type: number
          format: float
        createdAt:
          type: string
          format: date-time
      required:
        - taskId
        - userId
        - startTime
        - duration

    ActivityLog:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        entityType:
          type: string
          enum: [PROJECT, EPIC, STORY, TASK, COMMENT, USER, TEAM]
        entityId:
          type: string
          format: uuid
        action:
          type: string
          enum: [CREATE, UPDATE, DELETE, ASSIGN, UNASSIGN, COMPLETE, REOPEN]
        details:
          type: object
        createdAt:
          type: string
          format: date-time
      required:
        - userId
        - entityType
        - entityId
        - action

    Dashboard:
      type: object
      properties:
        recentProjects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
        assignedTasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        upcomingDeadlines:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        teamActivities:
          type: array
          items:
            $ref: '#/components/schemas/ActivityLog'
        projectMetrics:
          type: object
          properties:
            totalProjects:
              type: integer
            completedProjects:
              type: integer
            onTrackProjects:
              type: integer
            delayedProjects:
              type: integer

    ProjectTemplate:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        epicTemplates:
          type: array
          items:
            $ref: '#/components/schemas/EpicTemplate'
        defaultTeamStructure:
          type: array
          items:
            $ref: '#/components/schemas/TeamRole'
        companyId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    EpicTemplate:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        storyTemplates:
          type: array
          items:
            $ref: '#/components/schemas/StoryTemplate'
        estimatedDuration:
          type: integer
          description: Estimated duration in days

    StoryTemplate:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        taskTemplates:
          type: array
          items:
            $ref: '#/components/schemas/TaskTemplate'
        estimatedStoryPoints:
          type: integer

    TaskTemplate:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        estimatedHours:
          type: number
          format: float
        requiredSkills:
          type: array
          items:
            type: string

    TeamRole:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        permissions:
          type: array
          items:
            type: string
            enum: [VIEW, EDIT, DELETE, ASSIGN, MANAGE]
        level:
          type: string
          enum: [TEAM_MEMBER, TEAM_LEAD, PROJECT_MANAGER, DEPARTMENT_HEAD, ADMIN]

    WorkflowStage:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        order:
          type: integer
        type:
          type: string
          enum: [EPIC, STORY, TASK]
        allowedTransitions:
          type: array
          items:
            type: string
            format: uuid
        requiredApprovers:
          type: integer
        autoTransitionRules:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowRule'

    WorkflowRule:
      type: object
      properties:
        id:
          type: string
          format: uuid
        condition:
          type: string
          enum: [ALL_SUBTASKS_COMPLETE, TIME_ELAPSED, APPROVAL_RECEIVED]
        value:
          type: string
        nextStage:
          type: string
          format: uuid

    Report:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [PROJECT_PROGRESS, TEAM_PERFORMANCE, RESOURCE_UTILIZATION, TIME_TRACKING, CUSTOM]
        filters:
          type: object
          additionalProperties: true
        schedule:
          type: object
          properties:
            frequency:
              type: string
              enum: [DAILY, WEEKLY, MONTHLY]
            recipients:
              type: array
              items:
                type: string
                format: email
        lastRun:
          type: string
          format: date-time
        nextRun:
          type: string
          format: date-time

    # Communication-related schemas
    DeviceInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        status:
          type: string
          enum: [CONNECTED, DISCONNECTED, PENDING]
        lastActive:
          type: string
          format: date-time
        platform:
          type: string
        userId:
          type: string
          format: uuid

    QRCode:
      type: object
      properties:
        code:
          type: string
        timeout:
          type: integer
        deviceId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time

    Chat:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [DIRECT, GROUP, PROJECT, TASK]
        name:
          type: string
        participants:
          type: array
          items:
            $ref: '#/components/schemas/User'
        lastMessage:
          $ref: '#/components/schemas/Message'
        unreadCount:
          type: integer
        projectId:
          type: string
          format: uuid
        taskId:
          type: string
          format: uuid
        archived:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
        chatId:
          type: string
          format: uuid
        sender:
          $ref: '#/components/schemas/User'
        type:
          type: string
          enum: [TEXT, MEDIA, LOCATION, TASK_UPDATE, PROJECT_UPDATE, MENTION]
        content:
          type: string
        metadata:
          type: object
          properties:
            taskId:
              type: string
              format: uuid
            projectId:
              type: string
              format: uuid
            entityType:
              type: string
              enum: [TASK, PROJECT, EPIC, STORY]
            entityAction:
              type: string
              enum: [CREATED, UPDATED, COMPLETED, ASSIGNED]
        mediaUrl:
          type: string
        location:
          type: object
          properties:
            latitude:
              type: number
              format: float
            longitude:
              type: number
              format: float
            address:
              type: string
        reactions:
          type: array
          items:
            type: object
            properties:
              emoji:
                type: string
              users:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        mentions:
          type: array
          items:
            $ref: '#/components/schemas/User'
        readBy:
          type: array
          items:
            $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time

    ProjectChat:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        type:
          type: string
          enum: [GENERAL, TEAM, TASK_SPECIFIC]
        name:
          type: string
        description:
          type: string
        participants:
          type: array
          items:
            $ref: '#/components/schemas/User'
        settings:
          type: object
          properties:
            notifications:
              type: boolean
            autoAdd:
              type: boolean
            membershipCriteria:
              type: array
              items:
                type: string
                enum: [PROJECT_MEMBER, TEAM_LEAD, TASK_ASSIGNEE]

paths:
  /companies:
    post:
      summary: Create a new company
      operationId: createCompany
      tags:
        - Companies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Company'
      responses:
        '201':
          description: Company created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
    
    get:
      summary: Get all companies
      operationId: getCompanies
      tags:
        - Companies
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of companies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Company'

  /companies/{companyId}:
    get:
      summary: Get company by ID
      operationId: getCompanyById
      tags:
        - Companies
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Company details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'

  /departments:
    post:
      summary: Create a new department
      operationId: createDepartment
      tags:
        - Departments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Department'
      responses:
        '201':
          description: Department created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'

  /departments/{departmentId}/subdepartments:
    post:
      summary: Create a sub-department
      operationId: createSubDepartment
      tags:
        - Departments
      parameters:
        - name: departmentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Department'
      responses:
        '201':
          description: Sub-department created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'

  /teams:
    post:
      summary: Create a new team
      operationId: createTeam
      tags:
        - Teams
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
      responses:
        '201':
          description: Team created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'

  /teams/{teamId}/members:
    post:
      summary: Add members to team
      operationId: addTeamMembers
      tags:
        - Teams
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: uuid
      responses:
        '200':
          description: Members added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'

  /projects:
    post:
      summary: Create a new project
      operationId: createProject
      tags:
        - Projects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'

  /projects/{projectId}/epics:
    post:
      summary: Create a new epic
      operationId: createEpic
      tags:
        - Epics
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Epic'
      responses:
        '201':
          description: Epic created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Epic'

  /epics/{epicId}/stories:
    post:
      summary: Create a new story
      operationId: createStory
      tags:
        - Stories
      parameters:
        - name: epicId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Story'
      responses:
        '201':
          description: Story created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Story'

  /stories/{storyId}/tasks:
    post:
      summary: Create a new task
      operationId: createTask
      tags:
        - Tasks
      parameters:
        - name: storyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /tasks/{taskId}/subtasks:
    post:
      summary: Create a subtask
      operationId: createSubtask
      tags:
        - Tasks
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '201':
          description: Subtask created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /comments:
    post:
      summary: Create a new comment
      operationId: createComment
      tags:
        - Comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

  /attachments:
    post:
      summary: Upload an attachment
      operationId: uploadAttachment
      tags:
        - Attachments
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                entityType:
                  type: string
                  enum: [EPIC, STORY, TASK]
                entityId:
                  type: string
                  format: uuid
      responses:
        '201':
          description: Attachment uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      operationId: login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      operationId: register
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /auth/change-password:
    post:
      tags:
        - Authentication
      summary: Change user password
      operationId: changePassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      operationId: getUsers
      parameters:
        - name: companyId
          in: query
          schema:
            type: string
            format: uuid
        - name: departmentId
          in: query
          schema:
            type: string
            format: uuid
        - name: role
          in: query
          schema:
            type: string
            enum: [ADMIN, MANAGER, TEAM_LEAD, DEVELOPER, VIEWER]
        - name: status
          in: query
          schema:
            type: string
            enum: [ACTIVE, INACTIVE, PENDING]
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{userId}:
    get:
      tags:
        - Users
      summary: Get user by ID
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    put:
      tags:
        - Users
      summary: Update user
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /projects/{projectId}:
    get:
      tags:
        - Projects
      summary: Get project by ID
      operationId: getProjectById
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'

    put:
      tags:
        - Projects
      summary: Update project
      operationId: updateProject
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'

    delete:
      tags:
        - Projects
      summary: Delete project
      operationId: deleteProject
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Project deleted successfully

  /projects/search:
    get:
      tags:
        - Projects
      summary: Search projects
      operationId: searchProjects
      parameters:
        - name: query
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [PLANNING, IN_PROGRESS, ON_HOLD, COMPLETED, CANCELLED]
        - name: priority
          in: query
          schema:
            type: string
            enum: [LOW, MEDIUM, HIGH, CRITICAL]
        - name: teamId
          in: query
          schema:
            type: string
            format: uuid
        - name: departmentId
          in: query
          schema:
            type: string
            format: uuid
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of matching projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'

  /projects/{projectId}/stats:
    get:
      tags:
        - Analytics
      summary: Get project statistics
      operationId: getProjectStats
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Project statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectStats'

  /users/{userId}/stats:
    get:
      tags:
        - Analytics
      summary: Get user statistics
      operationId: getUserStats
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: User statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStats'

  /tasks/{taskId}/time-entries:
    post:
      tags:
        - Time Tracking
      summary: Create time entry
      operationId: createTimeEntry
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeEntry'
      responses:
        '201':
          description: Time entry created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeEntry'

    get:
      tags:
        - Time Tracking
      summary: Get task time entries
      operationId: getTaskTimeEntries
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of time entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimeEntry'

  /activity-logs:
    get:
      tags:
        - Activity Logs
      summary: Get activity logs
      operationId: getActivityLogs
      parameters:
        - name: entityType
          in: query
          schema:
            type: string
            enum: [PROJECT, EPIC, STORY, TASK, COMMENT, USER, TEAM]
        - name: entityId
          in: query
          schema:
            type: string
            format: uuid
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
        - name: action
          in: query
          schema:
            type: string
            enum: [CREATE, UPDATE, DELETE, ASSIGN, UNASSIGN, COMPLETE, REOPEN]
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of activity logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityLog'

  /notifications:
    get:
      tags:
        - Notifications
      summary: Get user notifications
      operationId: getUserNotifications
      parameters:
        - name: read
          in: query
          schema:
            type: boolean
        - name: type
          in: query
          schema:
            type: string
            enum: [TASK_ASSIGNED, COMMENT_ADDED, MENTION, DUE_DATE, STATUS_CHANGE]
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'

  /notifications/{notificationId}/mark-read:
    post:
      tags:
        - Notifications
      summary: Mark notification as read
      operationId: markNotificationRead
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Notification marked as read
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'

  /notifications/mark-all-read:
    post:
      tags:
        - Notifications
      summary: Mark all notifications as read
      operationId: markAllNotificationsRead
      responses:
        '200':
          description: All notifications marked as read

  /dashboard:
    get:
      tags:
        - Dashboard
      summary: Get user dashboard
      operationId: getDashboard
      responses:
        '200':
          description: Dashboard data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'

  /project-templates:
    post:
      tags:
        - Project Templates
      summary: Create project template
      operationId: createProjectTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectTemplate'
      responses:
        '201':
          description: Project template created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectTemplate'

    get:
      tags:
        - Project Templates
      summary: Get project templates
      operationId: getProjectTemplates
      parameters:
        - name: companyId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of project templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectTemplate'

  /projects/{projectId}/workflow:
    get:
      tags:
        - Workflow
      summary: Get project workflow
      operationId: getProjectWorkflow
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Project workflow stages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkflowStage'

    post:
      tags:
        - Workflow
      summary: Configure project workflow
      operationId: configureProjectWorkflow
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/WorkflowStage'
      responses:
        '200':
          description: Workflow configured successfully

  /reports:
    post:
      tags:
        - Reports
      summary: Create report
      operationId: createReport
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Report'
      responses:
        '201':
          description: Report created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'

    get:
      tags:
        - Reports
      summary: Get reports
      operationId: getReports
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [PROJECT_PROGRESS, TEAM_PERFORMANCE, RESOURCE_UTILIZATION, TIME_TRACKING, CUSTOM]
      responses:
        '200':
          description: List of reports
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'

  /reports/{reportId}/generate:
    post:
      tags:
        - Reports
      summary: Generate report
      operationId: generateReport
      parameters:
        - name: reportId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Report generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  reportUrl:
                    type: string
                  generatedAt:
                    type: string
                    format: date-time

  /projects/{projectId}/dependencies:
    get:
      tags:
        - Projects
      summary: Get project dependencies
      operationId: getProjectDependencies
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Project dependencies
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    items:
                      type: object
                      properties:
                        taskId:
                          type: string
                          format: uuid
                        dependencies:
                          type: array
                          items:
                            type: string
                            format: uuid
                  criticalPath:
                    type: array
                    items:
                      type: string
                      format: uuid

  /projects/{projectId}/resource-allocation:
    get:
      tags:
        - Resource Management
      summary: Get resource allocation
      operationId: getResourceAllocation
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Resource allocation
          content:
            application/json:
              schema:
                type: object
                properties:
                  resources:
                    type: array
                    items:
                      type: object
                      properties:
                        userId:
                          type: string
                          format: uuid
                        allocation:
                          type: array
                          items:
                            type: object
                            properties:
                              date:
                                type: string
                                format: date
                              hours:
                                type: number
                                format: float
                              taskId:
                                type: string
                                format: uuid

  # Communication endpoints
  /communication/devices:
    get:
      tags:
        - Communication
      summary: Get all connected devices
      operationId: getAllDevices
      responses:
        '200':
          description: List of connected devices
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceInfo'

    delete:
      tags:
        - Communication
      summary: Logout device
      operationId: logoutDevice
      parameters:
        - name: deviceId
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Device logged out successfully

  /communication/qr:
    get:
      tags:
        - Communication
      summary: Get QR code for device login
      operationId: getLoginQR
      responses:
        '200':
          description: QR code for device login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QRCode'

  /communication/chats:
    get:
      tags:
        - Communication
      summary: Get all chats
      operationId: getAllChats
      parameters:
        - name: deviceId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: projectId
          in: query
          schema:
            type: string
            format: uuid
        - name: type
          in: query
          schema:
            type: string
            enum: [DIRECT, GROUP, PROJECT, TASK]
      responses:
        '200':
          description: List of chats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Chat'

  /communication/chats/{chatId}:
    get:
      tags:
        - Communication
      summary: Get specific chat
      operationId: getChat
      parameters:
        - name: chatId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: deviceId
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Chat details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'

    delete:
      tags:
        - Communication
      summary: Delete chat
      operationId: deleteChat
      parameters:
        - name: chatId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Chat deleted successfully

  /communication/chats/{chatId}/archive:
    put:
      tags:
        - Communication
      summary: Archive chat
      operationId: archiveChat
      parameters:
        - name: chatId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Chat archived successfully

  /communication/messages:
    get:
      tags:
        - Communication
      summary: Get messages
      operationId: getMessages
      parameters:
        - name: deviceId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: chatId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'

  /communication/messages/text:
    post:
      tags:
        - Communication
      summary: Send text message
      operationId: sendTextMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                deviceId:
                  type: string
                  format: uuid
                chatId:
                  type: string
                  format: uuid
                message:
                  type: string
                metadata:
                  type: object
                  properties:
                    taskId:
                      type: string
                      format: uuid
                    projectId:
                      type: string
                      format: uuid
              required:
                - deviceId
                - chatId
                - message
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'

  /projects/{projectId}/chats:
    post:
      tags:
        - Project Communication
      summary: Create project chat
      operationId: createProjectChat
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectChat'
      responses:
        '201':
          description: Project chat created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectChat'

    get:
      tags:
        - Project Communication
      summary: Get project chats
      operationId: getProjectChats
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: type
          in: query
          schema:
            type: string
            enum: [GENERAL, TEAM, TASK_SPECIFIC]
      responses:
        '200':
          description: List of project chats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectChat'

  /tasks/{taskId}/chat:
    post:
      tags:
        - Task Communication
      summary: Create or get task chat
      operationId: createTaskChat
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Task chat details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'